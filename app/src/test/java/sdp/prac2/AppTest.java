/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sdp.prac2;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    //tests if task2 removes first character from each element in list
    @Test void task2RemovesFirstCharacter() {
        //Arrange
        SimpleFunctions testClass = new SimpleFunctions();
        List<String> strings = Arrays.asList("hi", "bye", "greetings", "top of the morning");
        List<String> expected = Arrays.asList("i", "ye", "reetings", "op of the morning");
        //Act
        List<String> result = testClass.Task2(strings);
        //Assert
        assertIterableEquals(expected, result);
    }

    //tests if task2 removes elements without characters from list
    @Test void task2RemovesEmptyElements() {
        //Arrange
        SimpleFunctions testClass = new SimpleFunctions();
        List<String> strings = Arrays.asList("hi", "", "", "top of the morning");
        List<String> expected = Arrays.asList("i", "op of the morning");
        //Act
        List<String> result = testClass.Task2(strings);
        //Assert
        assertIterableEquals(expected, result);
    }
    /* /**
       Checking if task 3 works for brackets that are nested correctly and they balance
     */
    @Test void task3Matching_and_Nested_Correctly() {
        //Arrange
        SimpleFunctions testClass = new SimpleFunctions();
        List<String> strings = Arrays.asList("(())", "((()))", "((((()))))");
       
        //Act
        boolean result = testClass.Task2(strings);
        //Assert
        assertIterableEquals(true, result);
    }

    // Checking if task 3 works for brackets that are not nested correctly and they do not balance
    @Test void task2Matching_and_not_Nested_Correctly() {
        //Arrange
        SimpleFunctions testClass = new SimpleFunctions();
        List<String> strings = Arrays.asList("(()(()))", "((()", "()()(");
       
        //Act
        boolean result = testClass.Task2(strings);
        //Assert
        assertIterableEquals(false, result);
    } */

}
